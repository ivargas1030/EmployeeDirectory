{"version":3,"sources":["components/body/index.js","components/header/index.js","util/API.js","components/table/index.js","components/searchbar/index.js","App.js","serviceWorker.js","index.js"],"names":["Body","this","props","children","React","Component","Header","class","axios","get","Table","state","results","API","then","res","setState","data","catch","err","console","log","map","employee","index","key","scope","alt","src","picture","thumbnail","className","name","first","last","phone","email","dob","date","SearchBar","type","placeholder","aria-label","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"iWAQeA,E,iLAJX,OAAO,6BAAMC,KAAKC,MAAMC,c,GAFTC,IAAMC,WCYVC,G,uLARX,OACE,yBAAKC,MAAM,gCACT,0BAAMA,MAAM,wBAAZ,2B,GAJaH,IAAMC,Y,iBCCZ,EACH,WACR,OAAOG,IAAMC,IALD,kDCoDDC,G,iNAhDbC,MAAQ,CACNC,QAAS,I,mFAGU,IAAD,OAClBC,IACGC,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAAEJ,QAASG,EAAIE,KAAKL,aAC9CM,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,+BAI5B,OACE,+BACGlB,KAAKU,MAAMC,QAAQU,KAAI,SAACC,EAAUC,GAAX,OACtB,yBAAKC,IAAKD,GACR,2BAAOjB,MAAM,SACX,+BACE,4BACE,wBAAImB,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SAGJ,+BACE,4BACE,yBACEC,IAAI,WACJC,IAAKL,EAASM,QAAQC,UACtBC,UAAU,eAGd,4BACGR,EAASS,KAAKC,MADjB,IACyBV,EAASS,KAAKE,MAEvC,4BAAKX,EAASY,OACd,4BAAKZ,EAASa,OACd,4BAAKb,EAASc,IAAIC,YAItB,S,GA3CQlC,IAAMC,Y,MCcXkC,MAdf,SAAmBrC,GACjB,OACE,yBAAKK,MAAM,oCACX,2BAAOA,MAAM,eAAeiC,KAAK,OAAOC,YAAY,SAASC,aAAW,aCS7DC,MAVf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdvC,OAAM,SAAAwC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.7392e122.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Body extends React.Component {\r\n  render() {\r\n    return <div>{this.props.children}</div>;\r\n  }\r\n}\r\n\r\nexport default Body","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nclass Header extends React.Component {\r\n  render() {\r\n    return (\r\n      <nav class=\"navbar navbar-light bg-light\">\r\n        <span class=\"navbar-brand mb-0 h1\">Employee Directory</span>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import axios from \"axios\";\r\n\r\nconst BASEURL = \"https://randomuser.me/api/?results=200&nat=us\";\r\n\r\n// Export an object with a \"search\" method that searches the Giphy API for the passed query\r\nexport default {\r\n  getUsers: function() {\r\n    return axios.get(BASEURL);\r\n  }\r\n};","import React from \"react\";\r\nimport API from \"../../util/API\";\r\nimport \"./style.css\";\r\n\r\n\r\nclass Table extends React.Component {\r\n  state = {\r\n    results: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    API.getUsers()\r\n      .then(res => this.setState({ results: res.data.results }))\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <tbody>\r\n        {this.state.results.map((employee, index) => (\r\n          <div key={index}>\r\n            <table class=\"table\">\r\n              <thead>\r\n                <tr>\r\n                  <th scope=\"col\">Image</th>\r\n                  <th scope=\"col\">Name</th>\r\n                  <th scope=\"col\">Phone</th>\r\n                  <th scope=\"col\">Email</th>\r\n                  <th scope=\"col\">DOB</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <td>\r\n                  <img\r\n                    alt=\"Portrait\"\r\n                    src={employee.picture.thumbnail}\r\n                    className=\"img-fluid\"\r\n                  />\r\n                </td>\r\n                <td>\r\n                  {employee.name.first} {employee.name.last}\r\n                </td>\r\n                <td>{employee.phone}</td>\r\n                <td>{employee.email}</td>\r\n                <td>{employee.dob.date}</td>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        ))}{\" \"}\r\n      </tbody>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\n// Using the datalist element we can create autofill suggestions based on the props.breeds array\r\nfunction SearchBar(props) {\r\n  return (\r\n    <div class=\"active-pink-3 active-pink-4 mb-4\">\r\n    <input class=\"form-control\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\">\r\n    {/* <datalist id=\"employees\">\r\n          {props.employees.map(employee => (\r\n            <option value={employee} key={employee} />\r\n          ))}\r\n        </datalist> */}\r\n    </input>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\nimport './App.css';\nimport Body from './components/body';\nimport Header from './components/header';\nimport Table from './components/table';\nimport SearchBar from \"./components/searchbar\";\n\nfunction App() {\n  return (\n    <Body>\n      <Header></Header>\n      <SearchBar></SearchBar>\n      <Table></Table>\n    </Body>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}